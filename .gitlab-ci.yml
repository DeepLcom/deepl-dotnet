# Note: This GitLab CI configuration is used for internal testing, users can ignore it.
include:
  - project: '${CI_PROJECT_NAMESPACE}/ci-libs-for-client-libraries'
    file:
      - '/${CI_PROJECT_NAME}/.gitlab-ci.yml'
  - project: 'deepl/ops/ci-cd-infrastructure/gitlab-ci-lib'
    file:
      - '/templates/.secret-detection.yml'
  - template: Security/SAST.gitlab-ci.yml

# Global --------------------------

image: mcr.microsoft.com/dotnet/sdk:5.0-alpine

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

stages:
  - check
  - build
  - test
  - publish

variables:
  DOTNET_CLI_HOME: ${CI_PROJECT_DIR}
  XDG_DATA_HOME: ${CI_PROJECT_DIR}
  GITLAB_ADVANCED_SAST_ENABLED: 'true'

# stage: check ----------------------

.license_check_base:
  stage: check
  script:
    - ./license_checker.sh '*.cs' | tee license_check_output.txt
    - '[ ! -s license_check_output.txt ]'

license_check_scheduled:
  extends: .license_check_base
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  retry: 2

license_check_manual:
  extends: .license_check_base
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"

secret_detection:
  extends: .secret-detection
  stage: check
  image: !reference [.secret-detection, image]
  before_script:
    - echo "overriding default before_script..."
  rules:
    - if: $CI_MERGE_REQUEST_ID

gitlab-advanced-sast:
  stage: check
  rules:
    - when: always
  variables:
    SAST_EXCLUDED_PATHS: '$DEFAULT_SAST_EXCLUDED_PATHS'
    GIT_STRATEGY: clone

semgrep-sast:
  stage: check
  rules:
    - when: always
  variables:
    SAST_EXCLUDED_PATHS: '$DEFAULT_SAST_EXCLUDED_PATHS'
    GIT_STRATEGY: clone

# stage: build ----------------------

build:
  stage: build
  parallel:
    matrix:
      - CONFIGURATION:
          - Debug
          - Release
  script:
    - dotnet build --configuration $CONFIGURATION
  artifacts:
    paths:
      - DeepL/bin/
      - DeepL/obj/
      - DeepLTests/bin/
      - DeepLTests/obj/

package:
  stage: build
  needs: ["build"]
  script:
    - dotnet pack --no-restore --configuration Release -o package/Release
  artifacts:
    paths:
      - package/

# stage: test -------------------------

.test_base:
  stage: test
  extends: .test
  dependencies:
    - build
  parallel:
    matrix:
      - DOCKER_IMAGE: "mcr.microsoft.com/dotnet/sdk:5.0-alpine"
        FRAMEWORK: "net5.0"
        CONFIGURATION: "Release"
      - DOCKER_IMAGE: "mcr.microsoft.com/dotnet/sdk:3.1-alpine"
        FRAMEWORK: "netcoreapp3.1"
        CONFIGURATION:
          - Debug
          - Release
        USE_MOCK_SERVER: "use mock server"
      - DOCKER_IMAGE: "mcr.microsoft.com/dotnet/sdk:5.0-alpine"
        FRAMEWORK: "net5.0"
        CONFIGURATION:
          - Debug
          - Release
        USE_MOCK_SERVER: "use mock server"
  image: ${DOCKER_IMAGE}
  script:
    - >
      if [[ ! -z "${USE_MOCK_SERVER}" ]]; then
        echo "Using mock server"
        export DEEPL_SERVER_URL=http://deepl-mock:3000
        export DEEPL_MOCK_SERVER_PORT=3000
        export DEEPL_PROXY_URL=http://deepl-mock:3001
        export DEEPL_MOCK_PROXY_SERVER_PORT=3001
      fi
    - dotnet test
      --configuration $CONFIGURATION
      --framework $FRAMEWORK
      --logger:"junit;LogFilePath=..\artifacts\{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose"
  artifacts:
    reports:
      junit:
        - artifacts/*test-result.xml

test_scheduled:
  extends: .test_base
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  retry: 2

test_manual:
  extends: .test_base
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"


# stage: publish -------------------------

nuget upload:
  stage: publish
  extends: .publish
  dependencies:
    - package
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
  script:
    - dotnet nuget push package/Release/DeepL.net.*.nupkg --api-key $NUGET_API_KEY
      --source https://api.nuget.org/v3/index.json --timeout 30
